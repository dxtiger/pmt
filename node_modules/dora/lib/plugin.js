'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolvePlugin = resolvePlugin;
exports.resolvePlugins = resolvePlugins;
exports.applyPlugins = applyPlugins;
exports.applyMiddlewares = applyMiddlewares;

var _loaderUtils = require('loader-utils');

var _path = require('path');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _isPlainObject = require('is-plain-object');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _resolve = require('./resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _spmLog = require('spm-log');

var _spmLog2 = _interopRequireDefault(_spmLog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isRelative(filepath) {
  return filepath.charAt(0) === '.';
}

function isAbsolute(filepath) {
  return filepath.charAt(0) === '/';
}

function resolvePlugin(_pluginName, resolveDir) {
  var cwd = arguments.length <= 2 || arguments[2] === undefined ? process.cwd() : arguments[2];

  var plugin = undefined;
  var query = undefined;
  var originQuery = undefined;
  var name = undefined;

  if (typeof _pluginName === 'string') {
    var _pluginName$split = _pluginName.split('?');

    var _pluginName$split2 = _slicedToArray(_pluginName$split, 2);

    var pluginName = _pluginName$split2[0];
    var _query = _pluginName$split2[1];

    originQuery = '?' + _query;
    query = (0, _loaderUtils.parseQuery)(originQuery);
    name = pluginName;

    if (isRelative(pluginName)) {
      plugin = require((0, _path.join)(cwd, pluginName));
    } else if (isAbsolute(pluginName)) {
      plugin = require(pluginName);
    } else {
      // is Module
      var pluginPath = (0, _resolve2.default)(pluginName, resolveDir);
      if (!pluginPath) {
        throw new Error('[Error] ' + pluginName + ' not found in ' + resolveDir);
      }
      plugin = require(pluginPath);
    }
  } else if ((0, _isPlainObject2.default)(_pluginName)) {
    plugin = _pluginName;
  }
  // support Function ?

  return (0, _objectAssign2.default)({
    name: name,
    originQuery: originQuery,
    query: query
  }, plugin);
}

function resolvePlugins(pluginNames, resolveDir, cwd) {
  return pluginNames.map(function (pluginName) {
    return resolvePlugin(pluginName, resolveDir, cwd);
  });
}

function applyPlugins(plugins, name, args, applyArgs, app) {
  var _this = this;

  return plugins.reduce(function (memo, plugin) {
    var func = plugin[name];
    if (!func) return memo;

    var log = ['debug', 'info', 'warn', 'error'].reduce(function (_memo, key) {
      _memo[key] = function (msg) {
        _spmLog2.default[key](plugin.name, msg);
      };
      return _memo;
    }, {});
    var localIP = require('internal-ip')();

    var ret = func.call(_this, (0, _objectAssign2.default)({}, args, {
      query: plugin.query,
      originQuery: plugin.originQuery,
      log: log,
      localIP: localIP
    }), memo);
    if (name === 'middleware') {
      app.use(ret);
    }
    return ret;
  }, applyArgs);
}

function applyMiddlewares(plugins, args, app) {
  applyPlugins(plugins, 'middleware', args, null, app);
}