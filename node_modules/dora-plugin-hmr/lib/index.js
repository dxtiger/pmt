'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('babel-polyfill');

var _webpackHotMiddleware = require('webpack-hot-middleware');

var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);

var _webpack = require('atool-build/lib/webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _path = require('path');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

try {
  require('babel-core-resolve-enhance')({
    dirname: __dirname
  });
} catch (e) {
  console.error('[Error] ' + e.message);
}

var _middleware = null;

exports.default = {

  'middleware': function middleware(args) {
    if (!global.g_dora_plugin_atool_build_compiler) {
      throw new Error('[error] must used together with dora-plugin-atool-build');
    }

    return regeneratorRuntime.mark(function _callee(next) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!_middleware) {
                _middleware = (0, _webpackHotMiddleware2.default)(global.g_dora_plugin_atool_build_compiler);
              }
              _context.next = 3;
              return _middleware.bind(null, this.req, this.res);

            case 3:
              _context.next = 5;
              return next;

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    });
  },

  'atool-build.updateWebpackConfig': function atoolBuildUpdateWebpackConfig(args, webpackConfig) {
    var port = args.port;
    // 修改 entry, 加上 webpack-hot-middleware/client

    webpackConfig.entry = Object.keys(webpackConfig.entry).reduce(function (memo, key) {
      memo[key] = ['webpack-hot-middleware/client?path=http://127.0.0.1:' + port + '/__webpack_hmr', webpackConfig.entry[key]];
      return memo;
    }, {});

    // 修改 babel-loader 参数
    webpackConfig.module.loaders.forEach(function (loader) {
      if (loader.loader === 'babel') {
        loader.query.plugins.push(['react-transform', {
          transforms: [{
            transform: 'react-transform-hmr',
            imports: ['react'],
            locals: ['module']
          }, {
            transform: 'react-transform-catch-errors',
            imports: ['react', 'redbox-react']
          }]
        }]);
      }
      return loader;
    });

    // Hot reload plugin
    webpackConfig.plugins.push(new _webpack2.default.HotModuleReplacementPlugin());

    // Fallback resolve path for npm2
    webpackConfig.resolve.fallback = webpackConfig.resolve.fallback || [];
    webpackConfig.resolve.fallback.push((0, _path.join)(__dirname, '../node_modules'));

    return webpackConfig;
  }

};
module.exports = exports['default'];