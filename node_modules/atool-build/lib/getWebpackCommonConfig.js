'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getWebpackCommonConfig;

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _extractTextWebpackPlugin = require('extract-text-webpack-plugin');

var _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);

var _getBabelCommonConfig = require('./getBabelCommonConfig');

var _getBabelCommonConfig2 = _interopRequireDefault(_getBabelCommonConfig);

var _path = require('path');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

try {
  require('babel-core-resolve-enhance')({
    dirname: __dirname
  });
} catch (e) {
  console.error('[Error] ' + e.message);
}

function getWebpackCommonConfig(args) {
  var pkg = require((0, _path.join)(args.cwd, 'package.json'));

  var jsFileName = args.hash ? '[name]-[chunkhash].js' : '[name].js';
  var cssFileName = args.hash ? '[name]-[chunkhash].css' : '[name].css';
  var commonName = args.hash ? 'common-[chunkhash].js' : 'common.js';

  var babelQuery = (0, _getBabelCommonConfig2.default)();

  var emptyBuildins = ['child_process', 'cluster', 'dgram', 'dns', 'fs', 'module', 'net', 'readline', 'repl', 'tls'];

  var browser = pkg.browser || {};

  var node = emptyBuildins.reduce(function (obj, name) {
    if (!(name in browser)) {
      obj[name] = 'empty';
    }
    return obj;
  }, {});

  return {

    output: {
      path: (0, _path.join)(process.cwd(), './dist/'),
      filename: jsFileName,
      chunkFilename: jsFileName
    },

    devtool: args.devtool,

    resolve: {
      modulesDirectories: ['node_modules', (0, _path.join)(__dirname, '../node_modules')],
      extensions: ['', '.js', '.jsx']
    },

    resolveLoader: {
      modulesDirectories: ['node_modules', (0, _path.join)(__dirname, '../node_modules')]
    },

    entry: pkg.entry,

    node: node,

    module: {
      loaders: [{
        test: /\.js$/,
        exclude: /node_modules/,
        loader: 'babel',
        query: babelQuery
      }, {
        test: /\.jsx$/,
        loader: 'babel',
        query: babelQuery
      }, {
        test: /\.css$/,
        loader: _extractTextWebpackPlugin2.default.extract('css?sourceMap&-restructuring!' + 'autoprefixer-loader')
      }, {
        test: /\.less$/,
        loader: _extractTextWebpackPlugin2.default.extract('css?sourceMap!' + 'autoprefixer-loader!' + ('less?{"sourceMap":true,"modifyVars":' + JSON.stringify(pkg.theme || {}) + '}'))
      }, { test: /\.woff(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&minetype=application/font-woff' }, { test: /\.woff2(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&minetype=application/font-woff' }, { test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&minetype=application/octet-stream' }, { test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, loader: 'file' }, { test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&minetype=image/svg+xml' }, { test: /\.(png|jpg|jpeg|gif)(\?v=\d+\.\d+\.\d+)?$/i, loader: 'url?limit=10000' }, { test: /\.json$/, loader: 'json' }]
    },

    plugins: [new _webpack2.default.optimize.CommonsChunkPlugin('common', commonName), new _extractTextWebpackPlugin2.default(cssFileName, {
      disable: false,
      allChunks: true
    }), new _webpack2.default.optimize.OccurenceOrderPlugin()]
  };
}
module.exports = exports['default'];